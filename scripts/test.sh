#!/bin/bash

# ARG_OPTIONAL_REPEATED([variant],[v],[The variant of the test to run (default is devcontainer,\npossible values are devcontainer, wsl and gnome)],[])
# ARG_OPTIONAL_REPEATED([os],[o],[The OS to run the tests against (default is ubuntu-20.04,\nexamples are ubuntu-18.04, ubuntu-20.04, the full list can be found at:\nhttps://mcr.microsoft.com/v2/vscode/devcontainers/base/tags/list)],[])
# ARG_OPTIONAL_SINGLE([pre-script],[],[The custom script to run before the installation],[])
# ARG_HELP([Tests the installation of the dotfiles in differents scenarios],[])
# ARGBASH_SET_INDENT([  ])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='voh'
  first_option="${1:0:1}"
  test "${all_short_options}" = "${all_short_options/${first_option}/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_variant=()
_arg_os=()
_arg_pre_script=

print_help() {
  printf '%s\n' "Tests the installation of the dotfiles in differents scenarios"
  printf 'Usage: %s [-v|--variant <arg>] [-o|--os <arg>] [--pre-script <arg>] [-h|--help]\n' "$0"
  printf '\t%s\n' "-v, --variant: The variant of the test to run (default is devcontainer,
		possible values are devcontainer, wsl and gnome) (empty by default)"
  printf '\t%s\n' "-o, --os: The OS to run the tests against (default is ubuntu-20.04,
		examples are ubuntu-18.04, ubuntu-20.04, the full list can be found at:
		https://mcr.microsoft.com/v2/vscode/devcontainers/base/tags/list) (empty by default)"
  printf '\t%s\n' "--pre-script: The custom script to run before the installation (no default)"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "${_key}" in
    -v | --variant)
      test $# -lt 2 && die "Missing value for the optional argument '${_key}'." 1
      _arg_variant+=("$2")
      shift
      ;;
    --variant=*)
      _arg_variant+=("${_key##--variant=}")
      ;;
    -v*)
      _arg_variant+=("${_key##-v}")
      ;;
    -o | --os)
      test $# -lt 2 && die "Missing value for the optional argument '${_key}'." 1
      _arg_os+=("$2")
      shift
      ;;
    --os=*)
      _arg_os+=("${_key##--os=}")
      ;;
    -o*)
      _arg_os+=("${_key##-o}")
      ;;
    --pre-script)
      test $# -lt 2 && die "Missing value for the optional argument '${_key}'." 1
      _arg_pre_script="$2"
      shift
      ;;
    --pre-script=*)
      _arg_pre_script="${_key##--pre-script=}"
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
      ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

cmd() {
  echo "==>" "$@"
  "$@"
}

run_test() {
  local -r os="$1"
  local -r setup_script="$2"

  cmd time docker run --rm --init --interactive --user vscode \
    --volume "${dotfiles_root}:/home/vscode/.dotfiles:ro" \
    "mcr.microsoft.com/vscode/devcontainers/base:${os}" \
    bash <<EOF
set -euxo pipefail

${_arg_pre_script}

${setup_script}

export DOTFILES_TEST=true
echo 'Defaults env_keep += "DOTFILES_TEST"' | sudo tee /etc/sudoers.d/env_keep

~/.dotfiles/install.sh

set +xeu
source ~/.profile
set -xeu

chezmoi data
EOF
}

set -euo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
dotfiles_root="$(realpath "${script_dir}/..")"

variants=("${_arg_variant[@]}")
if ((${#variants[@]} == 0)); then
  variants=("devcontainer")
fi

oses=("${_arg_os[@]}")
if ((${#oses[@]} == 0)); then
  oses=("ubuntu-20.04")
fi

for variant in "${variants[@]}"; do
  for os in "${oses[@]}"; do
    echo "Testing variant '${variant}' with OS '${os}'"

    if [[ "${variant}" == "devcontainer" ]]; then
      run_test "${os}" "export REMOTE_CONTAINERS=true"

    elif [[ "${variant}" == "wsl" ]]; then
      run_test "${os}" "$(
        # shellcheck disable=SC2312
        cat <<'EOF'
export IS_WSL=true

cat <<'EOM' | sudo tee /usr/local/bin/wslpath
#!/bin/bash

echo "Hello"
EOM

sudo chmod +x /usr/local/bin/wslpath

cat <<'EOM' | sudo tee /usr/local/bin/wslvar
#!/bin/bash

echo "Hello"
EOM

sudo chmod +x /usr/local/bin/wslvar

EOF
      )"

    elif [[ "${variant}" == "gnome" ]]; then
      run_test "${os}" "$(
        # shellcheck disable=SC2312
        cat <<'EOF'
sudo apt update
sudo apt install -y --no-install-recommends gnome-shell
EOF
      )"
    fi
  done
done

# ] <-- needed because of Argbash
