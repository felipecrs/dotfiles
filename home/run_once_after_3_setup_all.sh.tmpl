#!/bin/bash

echo_task() {
  printf "\033[0;34m--> %s\033[0m\n" "$*"
}

echo_sub_task() {
  printf "\033[0;34m----> %s\033[0m\n" "$*"
}

is_wsl() {
  # shellcheck disable=SC2050
  [[ "{{ .is_wsl }}" == true ]]
}

is_devcontainer() {
  # shellcheck disable=SC2050
  [[ "{{ .is_devcontainer }}" == true ]]
}

is_ubuntu() {
  local version=${1-'20.04'}

  [[ "{{ .chezmoi.osRelease.versionID }}" == "${version}" ]]
}

is_gnome() {
  # shellcheck disable=SC2050
  [[ "{{ .is_gnome }}" == true ]]
}

sdk() {
  bash <(
    cat <<'EOM'
export SDKMAN_DIR="$HOME/.sdkman"
if [[ -f "$SDKMAN_DIR/bin/sdkman-init.sh" ]]; then
  . "$SDKMAN_DIR/bin/sdkman-init.sh"
else
  echo "sdk is not installed" >&2
  exit 127
fi
sdk "$@"
EOM
  ) "$@"
}

set -euo pipefail

# See: https://github.com/microsoft/vscode-remote-release/issues/3531#issuecomment-675278804
if [[ -z "${USER+x}" ]]; then
  USER="$(id -un)"
fi

if ! sudo -n true 2>/dev/null; then
  echo_task "Prompting for sudo password"
  sudo true
fi

echo_task "Adding user to sudoers"
echo "$USER  ALL=(ALL) NOPASSWD:ALL" | sudo tee "/etc/sudoers.d/$USER"

echo_task "Making zsh the default shell"
sudo chsh -s "$(which zsh)" "$USER"

echo_task "Initializing zsh"
(
  # We need to be in a git repository, so gitstatusd initiliazes
  script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
  cd "$script_dir"
  # We also need to emulate a TTY
  script -qec "zsh -is </dev/null" /dev/null
)
echo "Done."

if ! is_devcontainer; then
  echo_task "Installing brew"

  # Fix PATH
  if [[ ":$PATH:" != *":/home/linuxbrew/.linuxbrew/bin:"* ]]; then
    export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
  fi

  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
  fi

  if ! brew --version &>/dev/null; then
    CI=true bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
  else
    echo "brew is already installed"
  fi

  echo_task "Installing brew packages"

  brew bundle --no-lock --file=/dev/stdin <<'EOF'
brew "chezmoi"
brew "yq"
brew "volta"
brew "kubectl"
brew "helm"
brew "kind"
brew "dive"
{{ if .is_work -}}
brew "jfrog-cli"
{{ else -}}
brew "gh"
{{ end -}}
{{ if and .is_gnome (not .is_wsl) -}}
brew "onedrive"
{{ end -}}
EOF

  # Uninstalling previously installed chezmoi because it was already installed
  # by Homebrew.
  local_bin_chezmoi="$HOME/.local/bin/chezmoi"
  if [[ -f "$local_bin_chezmoi" ]]; then
    echo_task "Uninstalling chezmoi at $local_bin_chezmoi"
    rm -f "$local_bin_chezmoi"
  fi
  unset local_bin_chezmoi

  echo_task "Installing deno"
  if ! deno --version &>/dev/null; then
    sh -c "$(curl -fsSL https://deno.land/x/install/install.sh)"
  else
    echo "deno is already installed"
  fi

  echo_task "Installing node, npm, and yarn"
  volta install node npm yarn

  echo_task "Installing sdk"
  if ! sdk version &>/dev/null; then
    # sdkman installation fails because chezmoi already placed in the etc/config file
    # so we install to a temporary directory
    target_sdkman_dir="$HOME/.sdkman"
    temp_sdkman_dir="$(mktemp --directory --dry-run --suffix=.sdkman)"
    echo "Installing sdkman to temp directory..."
    SDKMAN_DIR="$temp_sdkman_dir" bash -c "$(curl -fsSL "https://get.sdkman.io/?rcupdate=false")"

    echo "Now moving back sdkman to the target directory..."
    # then we replace the config file
    mv -f "$target_sdkman_dir/etc/config" "$temp_sdkman_dir/etc/config"
    # delete the target sdkman installation folder
    rm -rf "$target_sdkman_dir"
    # and move the temp install dir to the target one
    mv -f "$temp_sdkman_dir" "$target_sdkman_dir"
  else
    echo "sdk is already installed"
  fi

  echo_task "Installing Java 11"
  identifier="$(sdk list java | grep --only-matching --max-count 1 ' 11.*.hs-adpt ' | awk '{print $NF}')"
  sdk install java "$identifier"
  sdk default java "$identifier"
  unset identifier

  if is_wsl; then
    echo_task "Performing WSL specific steps"

    echo_task "Syncing .ssh folder from Windows to WSL"
    USERPROFILE="$(wslpath "$(wslvar USERPROFILE)")"
    if [[ -f "$USERPROFILE/.ssh/id_rsa" ]]; then
      cp -rf "$USERPROFILE/.ssh/." "$HOME/.ssh"
      chmod 600 "$HOME/.ssh/id_rsa"
    else
      echo "No keys to sync"
    fi
    unset USERPROFILE

    echo_task "Setting up Git credential helper"
    sudo git config --system --replace-all credential.helper "/mnt/c/Program\ Files/Git/mingw64/libexec/git-core/git-credential-manager-core.exe"

  elif is_gnome; then
    echo_task "Performing GNOME specific steps"

    sudo git config --system --replace-all credential.helper /usr/bin/git-credential-manager-core
    sudo git config --system --replace-all credential.credentialStore secretservice
  fi

fi
