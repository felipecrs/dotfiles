#!/bin/bash

set -euxo pipefail

echo "Installing apt packages"

{{ if not .is_devcontainer -}}
{{ if lookPath "add-apt-repository" | not -}}
echo "Installing add-apt-repository"
sudo apt update
sudo apt install -y software-properties-common
{{ end -}}
echo "Setting up repositories"
sudo add-apt-repository --no-update -y ppa:git-core/ppa
echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ .chezmoi.osRelease.ubuntuCodename }} stable" | sudo tee /etc/apt/sources.list.d/docker.list
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ .chezmoi.osRelease.versionID }}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
curl -fsSL https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_{{ .chezmoi.osRelease.versionID }}/Release.key | sudo apt-key add -
{{ if eq .chezmoi.osRelease.versionID "18.04" -}}
sudo add-apt-repository --no-update -y ppa:communitheme/ppa
{{ end -}}
{{ end -}}

readarray -t apt_packages <<'EOF'
zsh
{{ if not .is_devcontainer -}}
apt-transport-https
ca-certificates
gnupg
lsb-release
build-essential
curl
wget
tree
parallel
file
zip
git
jq
crudini
docker-ce
docker-ce-cli
containerd.io
skopeo
asciinema
{{ if .is_gnome -}}
yaru-theme-gtk
yaru-theme-icon
yaru-theme-sound
gnome-tweaks
{{ if not .is_wsl -}}
yaru-theme-gnome-shell
libsecret-1-0
{{ end -}}
{{ end -}}
{{ end -}}
EOF

# Only install if not already installed to save some time
echo "Installing packages"
sudo apt update

sudo apt install -y "${apt_packages[@]}"

{{ if not .is_devcontainer -}}
echo "Configuring Docker"
sudo usermod -aG docker "{{ .chezmoi.username }}"
if [[ ! -f /etc/docker/daemon.json ]]; then
  sudo mkdir -p /etc/docker
  echo '{}' | sudo tee /etc/docker/daemon.json >/dev/null
fi
jq --raw-output '.features.buildkit = true' /etc/docker/daemon.json | tee /tmp/daemon.json >/dev/null && sudo mv -f /tmp/daemon.json /etc/docker/daemon.json

{{ if .is_wsl -}}
sudo crudini --set /etc/wsl.conf boot command '"service docker start"'
{{- end }}

{{ if not .is_wsl | and .is_gnome | and (not (lookPath "git-credential-manager-core")) -}}
echo "Installing Git Credential Manager Core"
# Using this method while https://github.com/microsoft/Git-Credential-Manager-Core/issues/422 does not get solved
curl -fsSL 'https://glare.now.sh/microsoft/Git-Credential-Manager-Core/^.*.deb$' --output /tmp/gcmcore.deb
sudo apt install -y /tmp/gcmcore.deb
rm -f /tmp/gcmcore.deb
{{ end -}}

{{ if not .is_wsl | and .is_gnome | and (not (lookPath "google-chrome")) -}}
echo "Installing Google Chrome"
curl -fsSL 'https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb' --output /tmp/google-chrome.deb
sudo apt install -y /tmp/google-chrome.deb
rm -f /tmp/google-chrome.deb
{{ end -}}

{{ if not .is_wsl | and .is_gnome | and (not (lookPath "code")) -}}
echo "Installing VS Code"
curl -fsSL 'https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64' --output /tmp/code.deb
sudo apt install -y /tmp/code.deb
rm -f /tmp/code.deb
{{ end -}}

{{ end -}}
