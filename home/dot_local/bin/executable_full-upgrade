#!/bin/bash

set -euo pipefail

echo_task() {
  printf "\033[0;34m--> %s\033[0m\n" "$@"
}

yellow() {
  printf '\e[33;1m%s\e[m\n' "$*"
}

c() {
  yellow "+ $*"
  "$@"
}

brew() {
  bash <<EOM
  if [[ -f "/home/linuxbrew/.linuxbrew/bin/brew" ]]; then
    eval "\$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  elif [[ -f "\$HOME/.linuxbrew/bin/brew" ]]; then
    eval "\$("\$HOME/.linuxbrew/bin/brew" shellenv)"
  else
    echo "brew is not installed" >&2
    exit 127
  fi
  brew $@
EOM
}

nvm() {
  bash <<EOM
  export NVM_DIR="\$([ -z "\${XDG_CONFIG_HOME-}" ] && printf %s "\${HOME}/.nvm" || printf %s "\${XDG_CONFIG_HOME}/nvm")"
  if [[ -f "\$NVM_DIR/nvm.sh" ]]; then
    . "\$NVM_DIR/nvm.sh"
  else
    echo "nvm is not installed" >&2
    exit 127
  fi
  nvm $@
EOM
}

volta() {
  bash <<EOM
  export VOLTA_HOME="\$HOME/.volta"
  if [[ -f "\$VOLTA_HOME/bin/volta" ]]; then
    export PATH="\$VOLTA_HOME/bin:\$PATH"
  else
    echo "volta is not installed" >&2
    exit 127
  fi
  volta $@
EOM
}

sdk() {
  bash <<EOM
  export SDKMAN_DIR="\$HOME/.sdkman"
  if [[ -f "\$SDKMAN_DIR/bin/sdkman-init.sh" ]]; then
    . "\$SDKMAN_DIR/bin/sdkman-init.sh"
  else
    echo "sdk is not installed" >&2
    exit 127
  fi
  sdk $@
EOM
}

if chezmoi --version &>/dev/null; then
  echo_task "Updating dotfiles"
  c chezmoi upgrade
  # Pull latest changes from dotfiles repo
  c chezmoi update --verbose --apply=false
  # Apply changes to chezmoi config
  c chezmoi init --verbose --force
  # Apply the rest
  c chezmoi apply --verbose --force
fi

if apt --version &>/dev/null; then
  echo_task "Updating apt packages"
  c sudo apt update -y
  c sudo apt full-upgrade -y
fi

if timeout 2 snap warnings &>/dev/null; then
  echo_task "Updating snap packages"
  c sudo snap refresh
fi

if brew --version &>/dev/null; then
  echo_task "Updating brew"
  c brew update

  echo_task "Updating brew packages"
  c brew upgrade
fi

if command -v gnome-shell-extension-installer &>/dev/null; then
  echo_task "Updating gnome extensions"
  c gnome-shell-extension-installer --update --yes
fi

if deno --version &>/dev/null; then
  echo_task "Updating deno"
  c deno upgrade
fi

if nvm --version &>/dev/null; then
  echo_task "Updating nvm"
  # shellcheck disable=SC2016
  yellow '+ PROFILE=/dev/null bash -c "$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh)"'
  PROFILE=/dev/null bash -c "$(curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh)"
fi

if volta --version &>/dev/null; then
  echo_task "Updating node, npm and yarn with volta"
  c volta install node npm yarn

elif nvm --version &>/dev/null; then
  echo_task "Updating node with nvm"
  c nvm install 'lts/*' --reinstall-packages-from=current
  c nvm alias default 'lts/*'
fi

if npm --version &>/dev/null; then
  if ! volta --version &>/dev/null; then
    echo_task "Updating npm"
    npm install -g npm@latest
  fi

  echo_task "Updating npm packages"
  c npm update --global
fi

if sdk version &>/dev/null; then
  echo_task "Updating sdk"
  c sdk selfupdate

  echo_task "Updating sdk packages"
  c sdk update
fi
