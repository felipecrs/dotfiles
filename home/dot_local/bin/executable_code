#!/bin/sh

set -eu

get_in_path_except_current() {
  entries=$(which -a "$1") &&
    echo "${entries}" | grep -A1 "$0" | grep -v "$0" | head -1 | grep .
}

is_path_from_windows() {
  echo "${1}" | grep -q '^/mnt/.*$'
}

get_in_path_from_windows() {
  entries=$(which -a "$1") &&
    echo "${entries}" | grep -v -A99 "$0" | grep -v "$0" | grep -m1 '^/mnt/.*$' | grep .
}

is_first_arg_a_folder() {
  for arg; do
    shift
    # Skip options like --wait
    if [ "${arg#-}" = "${arg}" ]; then
      if [ -d "${arg}" ]; then
        echo "${arg}"
        return 0
      else
        return 1
      fi
    fi
  done
  return 1
}

if [ -n "${DEBUG:-}" ]; then
  set -x
fi

# Used to work around the issue: https://github.com/twpayne/chezmoi/issues/1068
if is_first_arg_a_folder "$@" >/dev/null; then
  # Removes -w and --wait flags
  for arg; do
    shift
    if [ "${arg}" = "--wait" ] || [ "${arg}" = "-w" ]; then
      echo "dropping --wait or -w flag" >&2
      continue
    fi
    set -- "$@" "${arg}"
  done
fi

# Check for a --devcontainer flag
for arg; do
  shift
  if [ "${arg}" = "--devcontainer" ]; then
    if workspace_folder=$(is_first_arg_a_folder "$@"); then
      workspace_folder="$(realpath "${workspace_folder}")"
    else
      echo "when using --devcontainer, the first arg must be a folder."
      exit 1
    fi

    if [ -d "${workspace_folder}" ]; then
      if ! workspace_folder_in_devcontainer=$(
        # https://github.com/microsoft/vscode-remote-release/issues/2133#issuecomment-1430651840
        devcontainer read-configuration --workspace-folder "${workspace_folder}" 2>/dev/null |
          jq --exit-status --raw-output .workspace.workspaceFolder |
          grep .
      ); then
        echo "failed to read the devcontainer workspace folder." >&2
        exit 1
      fi

      if [ -n "${WSL_DISTRO_NAME:-}" ]; then
        workspace_folder=$(wslpath -w "${workspace_folder}")
      fi
      path_id=$(printf "%s" "${workspace_folder}" | xxd -ps -c 256)

      set -- --folder-uri "vscode-remote://dev-container%2B${path_id}${workspace_folder_in_devcontainer}"
      break
    fi
  fi
  set -- "$@" "${arg}"
done

# Check if we are running in SSH, unless USE_NATIVE_CODE is set
if [ -z "${USE_NATIVE_CODE:-}" ] && who -m | grep -q .; then
  # We will try to find an existing connection and reuse it.
  # This allows opening VS Code windows from a SSH remote
  # session even out of the VS Code integrated terminal.
  printf "searching for remote ssh session (set USE_NATIVE_CODE=1 to use code from Linux)..." >&2
  if [ -d "${HOME}/.vscode-server/bin" ]; then

    # Find most recent folder inside of ~/.vscode-server/bin
    if bin_folder=$(find "${HOME}/.vscode-server/bin" \
      -mindepth 1 -maxdepth 1 -type d -printf "%T@ %p\n" |
      sort -n | cut -d' ' -f 2- | tail -n 1 | grep .); then

      # Ensure code binary is executable
      bin_path="${bin_folder}/bin/remote-cli/code"
      if [ -x "${bin_path}" ]; then

        # Find most recent sock
        uid=$(id -u)
        if sock_paths=$(find "/run/user/${uid}/" \
          -mindepth 1 -maxdepth 1 -type s -name "vscode-ipc-*.sock" -printf "%T@ %p\n" |
          sort --numeric-sort --reverse | cut -d' ' -f 2- | grep .); then

          sockets_count=$(echo "${sock_paths}" | wc -l)
          echo " ${sockets_count} sockets found." >&2
          echo "trying to connect..." >&2
          for sock_path in ${sock_paths}; do
            if VSCODE_IPC_HOOK_CLI="${sock_path}" "${bin_path}" "$@"; then
              exit 0
            else
              echo "trying next socket..." >&2
            fi
          done
        fi
      fi
    fi
  fi
  echo " not found." >&2
fi

# shellcheck disable=SC2310
if code="$(get_in_path_except_current code)"; then
  # shellcheck disable=SC2310
  if { [ -n "${WSL_DISTRO_NAME:-}" ] || [ -n "${IS_WSL:-}" ]; } &&
    ! is_path_from_windows "${code}"; then
    echo >&2
    if get_in_path_from_windows code >/dev/null && [ -z "${USE_NATIVE_CODE:-}" ]; then
      echo "using code from Windows (set USE_NATIVE_CODE=1 to use code from Linux)" >&2
      code="$(get_in_path_from_windows code)"
    else
      echo "using code from Linux (unset USE_NATIVE_CODE to use code from Windows)" >&2
      export DONT_PROMPT_WSL_INSTALL=1
    fi
  fi

  exec "${code}" "$@"
fi

echo >&2
printf "code is not available, " >&2
if command -v code-insiders >/dev/null 2>&1; then
  echo "using code-insiders instead" >&2
  exec code-insiders "$@"
fi

if is_first_arg_a_folder "$@" >/dev/null; then
  echo "not falling back to nano, vim or vi since you are trying to open a folder." >&2
  exit 127
fi

if command -v nano >/dev/null 2>&1; then
  editor="nano"
elif command -v vim >/dev/null 2>&1; then
  editor="vim"
elif command -v vi >/dev/null 2>&1; then
  editor="vi"
else
  echo "and neither code-insiders, nano, vim or vi." >&2
  exit 127
fi

echo "using ${editor} instead" >&2

# Removes -w and --wait flags
# code duplication here is required because there is no way to set
# script level args inside of functions in POSIX (on Bash we can use arrays)
for arg; do
  shift
  if [ "${arg}" = "--wait" ] || [ "${arg}" = "-w" ]; then
    echo "dropping --wait or -w flag" >&2
    continue
  fi
  set -- "$@" "${arg}"
done

exec "${editor}" "$@"
