#!/bin/bash

echo_blue() {
  printf "\033[0;34m%s\033[0m" "$*" >&2
}

echo_green_nl() {
  printf "\033[0;32m%s\033[0m\n" "$*" >&2
}

echo_red_nl() {
  printf "\033[0;31m%s\033[0m\n" "$*" >&2
}

get_in_path_except() {
  local -r command="$1"
  local -r except="$2"

  which -a "$command" | grep -A1 "$except" | grep -v "$except" | grep .
}

set -euo pipefail

docker="$(get_in_path_except docker "$0")"

# Unfortunately we cannot rely on status code 3, because if the service
# is stopped, its status become 1.
# We also do not want to try to start docker daemon if the service is
# not configured.
if ! service_stdout=$(service docker status 2>&1) && [[ "$service_stdout" == *"is not running"* ]]; then
  echo_blue "Starting Docker Daemon..."
  sudo service docker start >/dev/null

  readonly seconds=30
  for ((i = 0; i < seconds; i++)); do
    sleep 1

    if service docker status &>/dev/null; then
      exit_code=0
      break
    else
      exit_code=$?
    fi
  done

  if ((exit_code == 0)); then
    echo_green_nl " started successfully."
  else
    echo_red_nl " not able to start in $seconds seconds."
    exit $exit_code
  fi
fi

exec "$docker" "$@"
